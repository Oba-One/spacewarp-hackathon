import lighthouse from "@lighthouse-web3/sdk";
import { useAccount, useSignMessage } from "wagmi";

interface Conditions {
  id: number;
  chain: "hyperspace" | "filecoin";
  method: "balanceOf" | "balanceOfBatch" | "getBlockNumber";
  standardContractType: "ERC1155";
  contractAddress: string;
  returnValueTest: {
    comparator: ">=" | "<=" | "==" | ">";
    value: number;
  };
  parameters?: string[];
}

const progressCallback = (progressData: {
  total: number;
  uploaded: number;
}) => {
  let percentageDone = 100 - progressData.total / progressData?.uploaded;
  console.log(percentageDone);
};

export const useLighthouse = () => {
  const { address } = useAccount();
  const { signMessageAsync } = useSignMessage();

  const signature = async () => {
    if (!address) throw new Error("No address found.");

    const messageRequested = (await lighthouse.getAuthMessage(address)).data
      .message;
    const signedMessage = await signMessageAsync({
      message: messageRequested,
    });
    return {
      signedMessage: signedMessage,
      publicKey: address,
    };
  };

  const shareFile = async () => {
    const cid = "QmTTa7rm2nMjz6wCj9pvRsadrCKyDXm5Vmd2YyBubCvGPi";

    // Then get auth message and sign
    // Note: message should be signed by owner of file.
    const { publicKey, signedMessage } = await signature();

    const publicKeyUserB = ["0x201Bcc3217E5AA8e803B41d1F5B6695fFEbD5CeD"];

    const res = await lighthouse.shareFile(
      publicKey,
      publicKeyUserB,
      cid,
      signedMessage
    );

    console.log(res);
    /*
      data: {
        cid: "QmTTa7rm2nMjz6wCj9pvRsadrCKyDXm5Vmd2YyBubCvGPi",
        shareTo: "0x201Bcc3217E5AA8e803B41d1F5B6695fFEbD5CeD"
      }
    */
    /*Visit: 
        https://files.lighthouse.storage/viewFile/<cid>  
      To view encrypted file
    */
  };

  /* Deploy file along with encryption */
  const encryptFile = async (e: string) => {
    /*
       uploadEncrypted(e, publicKey, accessToken, uploadProgressCallback)
       - e: js event
       - publicKey: wallets public key
       - accessToken: your api key
       - signedMessage: message signed by the owner of publicKey
       - uploadProgressCallback: function to get progress (optional)
    */
    const sig = await signature();
    const response = await lighthouse.uploadEncrypted(
      e,
      sig.publicKey,
      import.meta.env.VITE_VERCEL_LIGHTHOUSE_API_KEY ?? "",
      sig.signedMessage,
      progressCallback
    );

    console.log(response);
    /*
      output:
        {
          Name: "c04b017b6b9d1c189e15e6559aeb3ca8.png",
          Size: "318557",
          Hash: "QmcuuAtmYqbPYmPx3vhJvPDi61zMxYvJbfENMjBQjq7aM3"
        }
      Note: Hash in response is CID.
    */

    return response.data.Hash;
  };

  /* Decrypt file */
  const decryptFile = async (
    cid = "QmcuuAtmYqbPYmPx3vhJvPDi61zMxYvJbfENMjBQjq7aM3"
  ) => {
    // Fetch file encryption key
    const { publicKey, signedMessage } = await signature();
    console.log(signedMessage);
    /*
      fetchEncryptionKey(cid, publicKey, signedMessage)
        Parameters:
          CID: CID of the file to decrypt
          publicKey: public key of the user who has access to file or owner
          signedMessage: message signed by the owner of publicKey
    */
    const keyObject = await lighthouse.fetchEncryptionKey(
      cid,
      publicKey,
      signedMessage
    );

    // Decrypt file
    /*
      decryptFile(cid, key, mimeType)
        Parameters:
          CID: CID of the file to decrypt
          key: the key to decrypt the file
          mimeType: default null, mime type of file
    */
    const decrypted = await lighthouse.decryptFile(cid, keyObject.data.key);
    console.log(decrypted);
    /*
      Response: blob
    */

    // View File
    const url = URL.createObjectURL(decrypted);
    console.log(url);
    return url;
  };

  const applyAccessConditions = async (
    cid = "QmZkEMF5y5Pq3n291fG45oyrmX8bwRh319MYvj7V4W4tNh",
    conditions: Conditions[]
  ) => {
    // CID on which you are applying encryption
    // CID is generated by uploading a file with encryption
    // Only the owner of the file can apply access conditions

    // Aggregator is what kind of operation to apply to access conditions
    // Suppose there are two conditions then you can apply ([1] and [2]), ([1] or [2]), !([1] and [2]).
    const aggregator = "([1])";
    const { publicKey, signedMessage } = await signature();

    /*
      accessCondition(publicKey, cid, signedMessage, conditions, aggregator)
        Parameters:
          publicKey: owners public key
          CID: CID of file to decrypt
          signedMessage: message signed by owner of publicKey
          conditions: should be in format like above
          aggregator: aggregator to apply on conditions
    */
    const response = await lighthouse.accessCondition(
      publicKey,
      cid,
      signedMessage,
      conditions,
      aggregator
    );

    console.log(response);
    /*
      {
        data: {
          cid: "QmZkEMF5y5Pq3n291fG45oyrmX8bwRh319MYvj7V4W4tNh",
          status: "Success"
        }
      }
    */
  };

  return {
    shareFile,
    decryptFile,
    encryptFile,
    applyAccessConditions,
  };
};
