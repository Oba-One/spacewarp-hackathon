/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type WorldQueryFragmentStruct = {
  queryType: PromiseOrValue<BigNumberish>;
  componentId: PromiseOrValue<BigNumberish>;
  value: PromiseOrValue<BytesLike>;
};

export type WorldQueryFragmentStructOutput = [number, BigNumber, string] & {
  queryType: number;
  componentId: BigNumber;
  value: string;
};

export interface WorldInterface extends utils.Interface {
  functions: {
    "components()": FunctionFragment;
    "getComponent(uint256)": FunctionFragment;
    "getComponentIdFromAddress(address)": FunctionFragment;
    "getNumEntities()": FunctionFragment;
    "getSystemAddress(uint256)": FunctionFragment;
    "getUniqueEntityId()": FunctionFragment;
    "hasEntity(uint256)": FunctionFragment;
    "init()": FunctionFragment;
    "query((uint8,uint256,bytes)[])": FunctionFragment;
    "register()": FunctionFragment;
    "registerComponent(address,uint256)": FunctionFragment;
    "registerComponentValueRemoved(uint256)": FunctionFragment;
    "registerComponentValueRemoved(address,uint256)": FunctionFragment;
    "registerComponentValueSet(address,uint256,bytes)": FunctionFragment;
    "registerComponentValueSet(uint256,bytes)": FunctionFragment;
    "registerSystem(address,uint256)": FunctionFragment;
    "systems()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "components"
      | "getComponent"
      | "getComponentIdFromAddress"
      | "getNumEntities"
      | "getSystemAddress"
      | "getUniqueEntityId"
      | "hasEntity"
      | "init"
      | "query"
      | "register"
      | "registerComponent"
      | "registerComponentValueRemoved(uint256)"
      | "registerComponentValueRemoved(address,uint256)"
      | "registerComponentValueSet(address,uint256,bytes)"
      | "registerComponentValueSet(uint256,bytes)"
      | "registerSystem"
      | "systems"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "components",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getComponent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentIdFromAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumEntities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSystemAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniqueEntityId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasEntity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "query",
    values: [WorldQueryFragmentStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "register", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerComponent",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerComponentValueRemoved(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerComponentValueRemoved(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerComponentValueSet(address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerComponentValueSet(uint256,bytes)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSystem",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "systems", values?: undefined): string;

  decodeFunctionResult(functionFragment: "components", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentIdFromAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumEntities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSystemAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniqueEntityId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasEntity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "query", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerComponentValueRemoved(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerComponentValueRemoved(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerComponentValueSet(address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerComponentValueSet(uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "systems", data: BytesLike): Result;

  events: {
    "ComponentValueRemoved(uint256,address,uint256)": EventFragment;
    "ComponentValueSet(uint256,address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ComponentValueRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComponentValueSet"): EventFragment;
}

export interface ComponentValueRemovedEventObject {
  componentId: BigNumber;
  component: string;
  entity: BigNumber;
}
export type ComponentValueRemovedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  ComponentValueRemovedEventObject
>;

export type ComponentValueRemovedEventFilter =
  TypedEventFilter<ComponentValueRemovedEvent>;

export interface ComponentValueSetEventObject {
  componentId: BigNumber;
  component: string;
  entity: BigNumber;
  data: string;
}
export type ComponentValueSetEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  ComponentValueSetEventObject
>;

export type ComponentValueSetEventFilter =
  TypedEventFilter<ComponentValueSetEvent>;

export interface World extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WorldInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    components(overrides?: CallOverrides): Promise<[string]>;

    getComponent(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getComponentIdFromAddress(
      componentAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumEntities(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSystemAddress(
      systemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUniqueEntityId(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasEntity(
      entity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    query(
      worldQueryFragments: WorldQueryFragmentStruct[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    register(overrides?: CallOverrides): Promise<[string]>;

    registerComponent(
      componentAddr: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerComponentValueRemoved(uint256)"(
      entity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerComponentValueRemoved(address,uint256)"(
      component: PromiseOrValue<string>,
      entity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerComponentValueSet(address,uint256,bytes)"(
      component: PromiseOrValue<string>,
      entity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerComponentValueSet(uint256,bytes)"(
      entity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerSystem(
      systemAddr: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    systems(overrides?: CallOverrides): Promise<[string]>;
  };

  components(overrides?: CallOverrides): Promise<string>;

  getComponent(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getComponentIdFromAddress(
    componentAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumEntities(overrides?: CallOverrides): Promise<BigNumber>;

  getSystemAddress(
    systemId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUniqueEntityId(overrides?: CallOverrides): Promise<BigNumber>;

  hasEntity(
    entity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  init(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  query(
    worldQueryFragments: WorldQueryFragmentStruct[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  register(overrides?: CallOverrides): Promise<string>;

  registerComponent(
    componentAddr: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerComponentValueRemoved(uint256)"(
    entity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerComponentValueRemoved(address,uint256)"(
    component: PromiseOrValue<string>,
    entity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerComponentValueSet(address,uint256,bytes)"(
    component: PromiseOrValue<string>,
    entity: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerComponentValueSet(uint256,bytes)"(
    entity: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerSystem(
    systemAddr: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  systems(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    components(overrides?: CallOverrides): Promise<string>;

    getComponent(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getComponentIdFromAddress(
      componentAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumEntities(overrides?: CallOverrides): Promise<BigNumber>;

    getSystemAddress(
      systemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUniqueEntityId(overrides?: CallOverrides): Promise<BigNumber>;

    hasEntity(
      entity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    init(overrides?: CallOverrides): Promise<void>;

    query(
      worldQueryFragments: WorldQueryFragmentStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    register(overrides?: CallOverrides): Promise<string>;

    registerComponent(
      componentAddr: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerComponentValueRemoved(uint256)"(
      entity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerComponentValueRemoved(address,uint256)"(
      component: PromiseOrValue<string>,
      entity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerComponentValueSet(address,uint256,bytes)"(
      component: PromiseOrValue<string>,
      entity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerComponentValueSet(uint256,bytes)"(
      entity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerSystem(
      systemAddr: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    systems(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ComponentValueRemoved(uint256,address,uint256)"(
      componentId?: PromiseOrValue<BigNumberish> | null,
      component?: PromiseOrValue<string> | null,
      entity?: PromiseOrValue<BigNumberish> | null
    ): ComponentValueRemovedEventFilter;
    ComponentValueRemoved(
      componentId?: PromiseOrValue<BigNumberish> | null,
      component?: PromiseOrValue<string> | null,
      entity?: PromiseOrValue<BigNumberish> | null
    ): ComponentValueRemovedEventFilter;

    "ComponentValueSet(uint256,address,uint256,bytes)"(
      componentId?: PromiseOrValue<BigNumberish> | null,
      component?: PromiseOrValue<string> | null,
      entity?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): ComponentValueSetEventFilter;
    ComponentValueSet(
      componentId?: PromiseOrValue<BigNumberish> | null,
      component?: PromiseOrValue<string> | null,
      entity?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): ComponentValueSetEventFilter;
  };

  estimateGas: {
    components(overrides?: CallOverrides): Promise<BigNumber>;

    getComponent(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentIdFromAddress(
      componentAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumEntities(overrides?: CallOverrides): Promise<BigNumber>;

    getSystemAddress(
      systemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniqueEntityId(overrides?: CallOverrides): Promise<BigNumber>;

    hasEntity(
      entity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    query(
      worldQueryFragments: WorldQueryFragmentStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(overrides?: CallOverrides): Promise<BigNumber>;

    registerComponent(
      componentAddr: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerComponentValueRemoved(uint256)"(
      entity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerComponentValueRemoved(address,uint256)"(
      component: PromiseOrValue<string>,
      entity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerComponentValueSet(address,uint256,bytes)"(
      component: PromiseOrValue<string>,
      entity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerComponentValueSet(uint256,bytes)"(
      entity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerSystem(
      systemAddr: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    systems(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    components(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getComponent(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponentIdFromAddress(
      componentAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumEntities(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSystemAddress(
      systemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniqueEntityId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasEntity(
      entity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    query(
      worldQueryFragments: WorldQueryFragmentStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerComponent(
      componentAddr: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerComponentValueRemoved(uint256)"(
      entity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerComponentValueRemoved(address,uint256)"(
      component: PromiseOrValue<string>,
      entity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerComponentValueSet(address,uint256,bytes)"(
      component: PromiseOrValue<string>,
      entity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerComponentValueSet(uint256,bytes)"(
      entity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerSystem(
      systemAddr: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    systems(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
