/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { CommitSystem, CommitSystemInterface } from "../CommitSystem";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWorld",
        name: "_world",
        type: "address",
      },
      {
        internalType: "address",
        name: "_components",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Ownable__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotTransitiveOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "arguments",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "commited",
        type: "uint256",
      },
    ],
    name: "executeTyped",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405162000cbf38038062000cbf83398101604081905261003191610199565b818161003c336100ec565b6001600160a01b0381161561005157806100b3565b816001600160a01b031663ba62fbe46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561008f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100b391906101d3565b600080546001600160a01b039283166001600160a01b0319918216179091556001805494909216931692909217909155506101f7915050565b600061010061015d60201b6103561760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6001600160a01b038116811461019657600080fd5b50565b600080604083850312156101ac57600080fd5b82516101b781610181565b60208401519092506101c881610181565b809150509250929050565b6000602082840312156101e557600080fd5b81516101f081610181565b9392505050565b610ab880620002076000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806309c5eabe146100515780633e991df31461007a5780638da5cb5b1461008d578063f2fde38b146100ba575b600080fd5b61006461005f36600461074e565b6100cf565b6040516100719190610801565b60405180910390f35b61006461008836600461086d565b610263565b610095610295565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6100cd6100c8366004610886565b6102da565b005b6060600033905060016000546100fa9073ffffffffffffffffffffffffffffffffffffffff1661037a565b600181111561010b5761010b6108c3565b14610177576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f436f6d6d697453797374656d3a204e6f742074686520726967687420526f756e60448201526064015b60405180910390fd5b60008380602001905181019061018d91906108f2565b6000549091506101d39073ffffffffffffffffffffffffffffffffffffffff167fb9bfb8acf34ca7217b5ac1c6a793f9e4861021d2abfc433087745a7c96f53d18610386565b6040517f1ab06ee5000000000000000000000000000000000000000000000000000000008152600481018490526024810183905273ffffffffffffffffffffffffffffffffffffffff9190911690631ab06ee590604401600060405180830381600087803b15801561024457600080fd5b505af1158015610258573d6000803e3d6000fd5b505050505050919050565b606061028f8260405160200161027b91815260200190565b6040516020818303038152906040526100cf565b92915050565b60006102d57f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff16331461034a576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610353816104d2565b50565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b600061028f82426104db565b6040517ffbdfa1ea00000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff85169063fbdfa1ea90602401600060405180830381865afa1580156103f6573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261043c919081019061090b565b905080516000036104a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6964206e6f742072656769737465726564000000000000000000000000000000604482015260640161016e565b6104ca816000815181106104bf576104bf6109b1565b602002602001015190565b949350505050565b61035381610624565b600080610508847f0f9dd24bbd2f19675b3fca355a567814eafa262312f033a2e289b40d70c05588610386565b6040517f0ff4c91600000000000000000000000000000000000000000000000000000000815261060d600482015273ffffffffffffffffffffffffffffffffffffffff9190911690630ff4c91690602401606060405180830381865afa158015610576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059a91906109e0565b8051909150831015610608576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f696e76616c696420617454696d65000000000000000000000000000000000000604482015260640161016e565b80516000906106179085610a48565b506000925061028f915050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460805460405173ffffffffffffffffffffffffffffffffffffffff8481169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610746576107466106d0565b604052919050565b6000602080838503121561076157600080fd5b823567ffffffffffffffff8082111561077957600080fd5b818501915085601f83011261078d57600080fd5b81358181111561079f5761079f6106d0565b6107cf847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016106ff565b915080825286848285010111156107e557600080fd5b8084840185840137600090820190930192909252509392505050565b600060208083528351808285015260005b8181101561082e57858101830151858201604001528201610812565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b60006020828403121561087f57600080fd5b5035919050565b60006020828403121561089857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146108bc57600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020828403121561090457600080fd5b5051919050565b6000602080838503121561091e57600080fd5b825167ffffffffffffffff8082111561093657600080fd5b818501915085601f83011261094a57600080fd5b81518181111561095c5761095c6106d0565b8060051b915061096d8483016106ff565b818152918301840191848101908884111561098757600080fd5b938501935b838510156109a55784518252938501939085019061098c565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000606082840312156109f257600080fd5b6040516060810181811067ffffffffffffffff82111715610a1557610a156106d0565b80604052508251815260208301516020820152604083015160ff81168114610a3c57600080fd5b60408201529392505050565b8181038181111561028f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220684f554e5ec6305e39e13097af34d38035be97bcc419c95b0047c5eb4f1b801464736f6c63430008110033";

type CommitSystemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CommitSystemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CommitSystem__factory extends ContractFactory {
  constructor(...args: CommitSystemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CommitSystem> {
    return super.deploy(
      _world,
      _components,
      overrides || {}
    ) as Promise<CommitSystem>;
  }
  override getDeployTransaction(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_world, _components, overrides || {});
  }
  override attach(address: string): CommitSystem {
    return super.attach(address) as CommitSystem;
  }
  override connect(signer: Signer): CommitSystem__factory {
    return super.connect(signer) as CommitSystem__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CommitSystemInterface {
    return new utils.Interface(_abi) as CommitSystemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CommitSystem {
    return new Contract(address, _abi, signerOrProvider) as CommitSystem;
  }
}
